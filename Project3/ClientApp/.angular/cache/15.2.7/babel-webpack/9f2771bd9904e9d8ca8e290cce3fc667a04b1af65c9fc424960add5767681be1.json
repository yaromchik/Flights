{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { searchShop } from '../fn/shop/search-shop';\nimport { searchShop$Plain } from '../fn/shop/search-shop-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class ShopService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchShop()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchShop$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchShop$Plain$Response(params, context) {\n    return searchShop$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchShop$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchShop$Plain(params, context) {\n    return this.searchShop$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchShop()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchShop$Response(params, context) {\n    return searchShop(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchShop$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchShop(params, context) {\n    return this.searchShop$Response(params, context).pipe(map(r => r.body));\n  }\n}\nShopService.SearchShopPath = '/api/Shop';\nShopService.ɵfac = function ShopService_Factory(t) {\n  return new (t || ShopService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nShopService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShopService,\n  factory: ShopService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAK7C,SAASC,UAAU,QAAQ,wBAAwB;AAEnD,SAASC,gBAAgB,QAAQ,8BAA8B;;;;AAI/D,OAAM,MAAOC,WAAY,SAAQH,WAAW;EAC1CI,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,yBAAyB,CAACC,MAAgC,EAAEC,OAAqB;IAC/E,OAAOP,gBAAgB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACnE;EAEA;;;;;;EAMAP,gBAAgB,CAACM,MAAgC,EAAEC,OAAqB;IACtE,OAAO,IAAI,CAACF,yBAAyB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACzDZ,GAAG,CAAEa,CAAqC,IAAqBA,CAAC,CAACC,IAAI,CAAC,CACvE;EACH;EAEA;;;;;;EAMAC,mBAAmB,CAACN,MAA0B,EAAEC,OAAqB;IACnE,OAAOR,UAAU,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC7D;EAEA;;;;;;EAMAR,UAAU,CAACO,MAA0B,EAAEC,OAAqB;IAC1D,OAAO,IAAI,CAACK,mBAAmB,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACnDZ,GAAG,CAAEa,CAAqC,IAAqBA,CAAC,CAACC,IAAI,CAAC,CACvE;EACH;;AAlDWV,WAAY,CAMPY,cAAc,GAAG,WAAW;AANjCZ,WAAY;mBAAZA,WAAW;AAAA;AAAXA,WAAY;SAAZA,WAAW;EAAAa,SAAXb,WAAW;EAAAc,YADE;AAAM","names":["map","BaseService","searchShop","searchShop$Plain","ShopService","constructor","config","http","searchShop$Plain$Response","params","context","rootUrl","pipe","r","body","searchShop$Response","SearchShopPath","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\r3187\\source\\repos\\Project3\\Project3\\ClientApp\\src\\app\\api\\services\\shop.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { Product } from '../models/product';\r\nimport { searchShop } from '../fn/shop/search-shop';\r\nimport { SearchShop$Params } from '../fn/shop/search-shop';\r\nimport { searchShop$Plain } from '../fn/shop/search-shop-plain';\r\nimport { SearchShop$Plain$Params } from '../fn/shop/search-shop-plain';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ShopService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `searchShop()` */\r\n  static readonly SearchShopPath = '/api/Shop';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchShop$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchShop$Plain$Response(params?: SearchShop$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Product>>> {\r\n    return searchShop$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchShop$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchShop$Plain(params?: SearchShop$Plain$Params, context?: HttpContext): Observable<Array<Product>> {\r\n    return this.searchShop$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<Product>>): Array<Product> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchShop()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchShop$Response(params?: SearchShop$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Product>>> {\r\n    return searchShop(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchShop$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchShop(params?: SearchShop$Params, context?: HttpContext): Observable<Array<Product>> {\r\n    return this.searchShop$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<Product>>): Array<Product> => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}